plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '6.0.18'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot with Kafka, MongoDB, and Flink'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    flinkVersion = '1.19.3'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    implementation "org.apache.flink:flink-java:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-files:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-kafka:3.1.0-1.18"
    implementation "org.apache.flink:flink-core:${flinkVersion}"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco/jacoco.xml")
    }
}

checkstyle {
    toolVersion = '10.14.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
}

pmd {
    toolVersion = '6.55.0'
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("${rootDir}/config/pmd/pmd-rules.xml")
}

spotbugs {
    toolVersion = '4.8.6'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

sonar {
    properties {
        property "sonar.projectKey", "kafkademoapplication"
        property "sonar.projectName", "Kafka Demo Application"
        property "sonar.host.url", "http://host.docker.internal:9000"
        property "sonar.login", "YOUR_SONAR_TOKEN"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacoco.xml"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
        property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/main.xml"
        property "sonar.java.pmd.reportPaths", "build/reports/pmd/main.xml"
    }
}
